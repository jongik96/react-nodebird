{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport axios from \"axios\";\nimport { all, call, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS } from \"../reducers/post\"; // function addPostAPI(data) {\n//   return axios.post(\"/api/post\", data);\n// }\n\nfunction addPost(action) {\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: action.data // data: result.data,\n\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n} // function addCommentAPI(data) {\n//   return axios.post(`/api/post/${data.id}/comment`, data);\n// }\n\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: ADD_COMMENT_SUCCESS // data: result.data,\n\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            data: _context2.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"names":["addPost","addComment","watchAddPost","watchAddComment","postSaga","axios","all","call","delay","fork","put","takeLatest","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","action","type","data","response"],"sources":["C:/react-study/next-inflearn/front/sagas/post.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { all, call, delay, fork, put, takeLatest } from \"redux-saga/effects\";\r\nimport {\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n} from \"../reducers/post\";\r\n// function addPostAPI(data) {\r\n//   return axios.post(\"/api/post\", data);\r\n// }\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: action.data,\r\n      // data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n// function addCommentAPI(data) {\r\n//   return axios.post(`/api/post/${data.id}/comment`, data);\r\n// }\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    // const result = yield call(addCommentAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      // data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\r\n}\r\n"],"mappings":";;oDAcUA,O;qDAqBAC,U;qDAgBAC,Y;qDAIAC,e;qDAIeC,Q;;AA3DzB,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,KAApB,EAA2BC,IAA3B,EAAiCC,GAAjC,EAAsCC,UAAtC,QAAwD,oBAAxD;AACA,SACEC,mBADF,EAEEC,mBAFF,EAGEC,mBAHF,EAIEC,gBAJF,EAKEC,gBALF,EAMEC,gBANF,QAOO,kBAPP,C,CAQA;AACA;AACA;;AAEA,SAAUjB,OAAV,CAAkBkB,MAAlB;EAAA;IAAA;MAAA;QAAA;UAAA;UAAA;UAGI,OAAMV,KAAK,CAAC,IAAD,CAAX;;QAHJ;UAAA;UAII,OAAME,GAAG,CAAC;YACRS,IAAI,EAAEF,gBADE;YAERG,IAAI,EAAEF,MAAM,CAACE,IAFL,CAGR;;UAHQ,CAAD,CAAT;;QAJJ;UAAA;UAAA;;QAAA;UAAA;UAAA;UAAA;UAUI,OAAMV,GAAG,CAAC;YACRS,IAAI,EAAEJ,gBADE;YAERK,IAAI,EAAE,YAAIC,QAAJ,CAAaD;UAFX,CAAD,CAAT;;QAVJ;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA,C,CAiBA;AACA;AACA;;;AAEA,SAAUnB,UAAV,CAAqBiB,MAArB;EAAA;IAAA;MAAA;QAAA;UAAA;UAAA;UAGI,OAAMV,KAAK,CAAC,IAAD,CAAX;;QAHJ;UAAA;UAII,OAAME,GAAG,CAAC;YACRS,IAAI,EAAEL,mBADE,CAER;;UAFQ,CAAD,CAAT;;QAJJ;UAAA;UAAA;;QAAA;UAAA;UAAA;UAAA;UASI,OAAMJ,GAAG,CAAC;YACRS,IAAI,EAAEP,mBADE;YAERQ,IAAI,EAAE,aAAIC,QAAJ,CAAaD;UAFX,CAAD,CAAT;;QATJ;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;;AAgBA,SAAUlB,YAAV;EAAA;IAAA;MAAA;QAAA;UAAA;UACE,OAAMS,UAAU,CAACK,gBAAD,EAAmBhB,OAAnB,CAAhB;;QADF;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;;AAIA,SAAUG,eAAV;EAAA;IAAA;MAAA;QAAA;UAAA;UACE,OAAMQ,UAAU,CAACE,mBAAD,EAAsBZ,UAAtB,CAAhB;;QADF;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;;AAIA,eAAe,SAAUG,QAAV;EAAA;IAAA;MAAA;QAAA;UAAA;UACb,OAAME,GAAG,CAAC,CAACG,IAAI,CAACP,YAAD,CAAL,EAAqBO,IAAI,CAACN,eAAD,CAAzB,CAAD,CAAT;;QADa;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA"},"metadata":{},"sourceType":"module"}