{"ast":null,"code":"import axios from \"axios\";\nimport { all, call, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport shortid from \"shortid\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\"; // function addPostAPI(data) {\n//   return axios.post(\"/api/post\", data);\n// }\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortid.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      } // data: result.data,\n\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(\"/api/post\", data);\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data // data: result.data,\n\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n} // function addCommentAPI(data) {\n//   return axios.post(`/api/post/${data.id}/comment`, data);\n// }\n\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost)]);\n}","map":{"version":3,"names":["axios","all","call","delay","fork","put","takeLatest","shortid","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPost","action","id","generate","type","data","content","err","response","removePostAPI","delete","removePost","addComment","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"sources":["C:/react-study/next-inflearn/front/sagas/post.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { all, call, delay, fork, put, takeLatest } from \"redux-saga/effects\";\r\nimport shortid from \"shortid\";\r\nimport {\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS,\r\n} from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\r\n\r\n// function addPostAPI(data) {\r\n//   return axios.post(\"/api/post\", data);\r\n// }\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI, action.data);\r\n    yield delay(1000);\r\n    const id = shortid.generate();\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: {\r\n        id,\r\n        content: action.data,\r\n      },\r\n      // data: result.data,\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n  return axios.delete(\"/api/post\", data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: action.data,\r\n      // data: result.data,\r\n    });\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n// function addCommentAPI(data) {\r\n//   return axios.post(`/api/post/${data.id}/comment`, data);\r\n// }\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    // const result = yield call(addCommentAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost)]);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}