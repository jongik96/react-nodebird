{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loadPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPosts),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport axios from \"axios\";\nimport { all, call, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport shortId, { generate } from \"shortid\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, generateDummyPost, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\"; // function loadPostAPI(data) {\n//   return axios.get(\"/api/posts\", data);\n// }\n\nfunction loadPost(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function loadPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          id = shortId.generate();\n          _context.next = 6;\n          return put({\n            type: LOAD_POSTS_SUCCESS,\n            data: generateDummyPost(10) // data: result.data,\n\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            type: LOAD_POSTS_FAILURE,\n            data: _context.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n} // function addPostAPI(data) {\n//   return axios.post(\"/api/post\", data);\n// }\n\n\nfunction addPost(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function addPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          id = shortid.generate();\n          _context2.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: {\n              id: id,\n              content: action.data\n            } // data: result.data,\n\n          });\n\n        case 6:\n          _context2.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: id\n          });\n\n        case 8:\n          _context2.next = 14;\n          break;\n\n        case 10:\n          _context2.prev = 10;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 14;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context2.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 10]]);\n} // function removePostAPI(data) {\n//   return axios.delete(\"/api/post\", data);\n// }\n\n\nfunction removePost(action) {\n  return _regeneratorRuntime.wrap(function removePost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: action.data // data: result.data,\n\n          });\n\n        case 5:\n          _context3.next = 7;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data\n          });\n\n        case 7:\n          _context3.next = 13;\n          break;\n\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 13;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            data: _context3.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 9]]);\n} // function addCommentAPI(data) {\n//   return axios.post(`/api/post/${data.id}/comment`, data);\n// }\n\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context4.next = 5;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context4.next = 11;\n          break;\n\n        case 7:\n          _context4.prev = 7;\n          _context4.t0 = _context4[\"catch\"](0);\n          _context4.next = 11;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            data: _context4.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 7]]);\n}\n\nfunction watchLoadPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadPosts$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([fork(watchAddPost), fork(watchLoadPosts), fork(watchAddComment), fork(watchRemovePost)]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}","map":{"version":3,"names":["loadPost","addPost","removePost","addComment","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga","axios","all","call","delay","fork","put","takeLatest","shortId","generate","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","generateDummyPost","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","action","id","type","data","response","shortid","content","loadPosts"],"sources":["C:/react-study/next-inflearn/front/sagas/post.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { all, call, delay, fork, put, takeLatest } from \"redux-saga/effects\";\r\nimport shortId, { generate } from \"shortid\";\r\nimport {\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  generateDummyPost,\r\n  LOAD_POSTS_FAILURE,\r\n  LOAD_POSTS_REQUEST,\r\n  LOAD_POSTS_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS,\r\n} from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\r\n\r\n// function loadPostAPI(data) {\r\n//   return axios.get(\"/api/posts\", data);\r\n// }\r\n\r\nfunction* loadPost(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI, action.data);\r\n    yield delay(1000);\r\n    const id = shortId.generate();\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: generateDummyPost(10),\r\n      // data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n// function addPostAPI(data) {\r\n//   return axios.post(\"/api/post\", data);\r\n// }\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI, action.data);\r\n    yield delay(1000);\r\n    const id = shortid.generate();\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: {\r\n        id,\r\n        content: action.data,\r\n      },\r\n      // data: result.data,\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n// function removePostAPI(data) {\r\n//   return axios.delete(\"/api/post\", data);\r\n// }\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: action.data,\r\n      // data: result.data,\r\n    });\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n// function addCommentAPI(data) {\r\n//   return axios.post(`/api/post/${data.id}/comment`, data);\r\n// }\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    // const result = yield call(addCommentAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchAddPost),\r\n    fork(watchLoadPosts),\r\n    fork(watchAddComment),\r\n    fork(watchRemovePost),\r\n  ]);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}