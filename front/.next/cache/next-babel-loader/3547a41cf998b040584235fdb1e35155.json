{"ast":null,"code":"import { all, call, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\"; // function logInAPI(data) {\n//   return axios.post(\"/api/login\", data);\n// }\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* logIn(action) {\n  try {\n    // const result = yield call(logInAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: \"LOG_IN_REQUEST\"\n    });\n    yield put({\n      type: \"LOG_IN_SUCCESS\",\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_IN_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\n\nfunction* logOut() {\n  try {\n    const result = yield call(logOutAPI);\n    yield put({\n      type: \"LOG_OUT_REQUEST\"\n    });\n    yield put({\n      type: \"LOG_OUT_SUCCESS\",\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_OUT_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(\"LOG_IN_REQUEST\", logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}","map":{"version":3,"names":["all","call","delay","fork","put","takeLatest","axios","logOutAPI","post","logIn","action","type","data","err","response","logOut","result","watchLogIn","watchLogOut","userSaga"],"sources":["C:/react-study/next-inflearn/front/sagas/user.js"],"sourcesContent":["import { all, call, delay, fork, put, takeLatest } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\n\r\n// function logInAPI(data) {\r\n//   return axios.post(\"/api/login\", data);\r\n// }\r\n\r\nfunction logOutAPI() {\r\n  return axios.post(\"/api/logout\");\r\n}\r\n\r\nfunction* logIn(action) {\r\n  try {\r\n    // const result = yield call(logInAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: \"LOG_IN_REQUEST\",\r\n    });\r\n    yield put({\r\n      type: \"LOG_IN_SUCCESS\",\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: \"LOG_IN_FAILURE\",\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    const result = yield call(logOutAPI);\r\n    yield put({\r\n      type: \"LOG_OUT_REQUEST\",\r\n    });\r\n    yield put({\r\n      type: \"LOG_OUT_SUCCESS\",\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: \"LOG_OUT_FAILURE\",\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\nfunction* watchLogIn() {\r\n  yield takeLatest(\"LOG_IN_REQUEST\", logIn);\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\r\n}\r\nexport default function* userSaga() {\r\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\r\n}\r\n"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,KAApB,EAA2BC,IAA3B,EAAiCC,GAAjC,EAAsCC,UAAtC,QAAwD,oBAAxD;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;AACA;AACA;;AAEA,SAASC,SAAT,GAAqB;EACnB,OAAOD,KAAK,CAACE,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,UAAUC,KAAV,CAAgBC,MAAhB,EAAwB;EACtB,IAAI;IACF;IACA,MAAMR,KAAK,CAAC,IAAD,CAAX;IACA,MAAME,GAAG,CAAC;MACRO,IAAI,EAAE;IADE,CAAD,CAAT;IAGA,MAAMP,GAAG,CAAC;MACRO,IAAI,EAAE,gBADE;MAERC,IAAI,EAAEF,MAAM,CAACE;IAFL,CAAD,CAAT;EAID,CAVD,CAUE,OAAOC,GAAP,EAAY;IACZ,MAAMT,GAAG,CAAC;MACRO,IAAI,EAAE,gBADE;MAERC,IAAI,EAAEC,GAAG,CAACC,QAAJ,CAAaF;IAFX,CAAD,CAAT;EAID;AACF;;AAED,UAAUG,MAAV,GAAmB;EACjB,IAAI;IACF,MAAMC,MAAM,GAAG,MAAMf,IAAI,CAACM,SAAD,CAAzB;IACA,MAAMH,GAAG,CAAC;MACRO,IAAI,EAAE;IADE,CAAD,CAAT;IAGA,MAAMP,GAAG,CAAC;MACRO,IAAI,EAAE,iBADE;MAERC,IAAI,EAAEI,MAAM,CAACJ;IAFL,CAAD,CAAT;EAID,CATD,CASE,OAAOC,GAAP,EAAY;IACZ,MAAMT,GAAG,CAAC;MACRO,IAAI,EAAE,iBADE;MAERC,IAAI,EAAEC,GAAG,CAACC,QAAJ,CAAaF;IAFX,CAAD,CAAT;EAID;AACF;;AACD,UAAUK,UAAV,GAAuB;EACrB,MAAMZ,UAAU,CAAC,gBAAD,EAAmBI,KAAnB,CAAhB;AACD;;AAED,UAAUS,WAAV,GAAwB;EACtB,MAAMb,UAAU,CAAC,iBAAD,EAAoBU,MAApB,CAAhB;AACD;;AACD,eAAe,UAAUI,QAAV,GAAqB;EAClC,MAAMnB,GAAG,CAAC,CAACG,IAAI,CAACc,UAAD,CAAL,EAAmBd,IAAI,CAACe,WAAD,CAAvB,CAAD,CAAT;AACD"},"metadata":{},"sourceType":"module"}