{"ast":null,"code":"import shortId from \"shortid\";\nimport produce from \"immer\";\nimport faker from \"@faker-js/faker\";\nexport var initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport var generateDummyPost = function generateDummyPost(number) {\n  return Array(20).fill().map(function (v, i) {\n    return {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName()\n      },\n      content: faker.lorem.paragraph(),\n      Images: [{\n        src: faker.image.imageUrl()\n      }],\n      Comments: [{\n        User: {\n          id: shortId.generate(),\n          nickname: faker.name.findName()\n        },\n        content: faker.lorem.sentence()\n      }]\n    };\n  });\n};\ninitialState.mainPosts = initialState.mainPosts.concat();\nexport var ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport var ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport var ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport var REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport var REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport var REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport var ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport var ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport var ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: data.id,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: \"박종익\"\n    },\n    Images: [],\n    Comments: []\n  };\n};\n\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortId.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: \"박종익\"\n    }\n  };\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = true;\n        draft.addPostError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data;\n        });\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError - null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.postId;\n          });\n          post.Comments.unshift(dummyComment(action.data.content));\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break; // const postIndex = state.mainPosts.findIndex(\n          //   (v) => v.id === action.data.postId\n          // );\n          // const post = { ...state.mainPosts[postIndex] };\n          // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = post;\n          // return {\n          //   ...state,\n          //   mainPosts,\n          //   addCommentLoading: false,\n          //   addCommentDone: true,\n          // };\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"names":["shortId","produce","faker","initialState","mainPosts","imagePaths","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","generateDummyPost","number","Array","fill","map","v","i","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","imageUrl","Comments","sentence","concat","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","unshift","error","filter","post","find","postId"],"sources":["C:/react-study/next-inflearn/front/reducers/post.js"],"sourcesContent":["import shortId from \"shortid\";\r\nimport produce from \"immer\";\r\nimport faker from \"@faker-js/faker\";\r\n\r\nexport const initialState = {\r\n  mainPosts: [],\r\n  imagePaths: [],\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n};\r\n\r\nexport const generateDummyPost = (number) =>\r\n  Array(20)\r\n    .fill()\r\n    .map((v, i) => ({\r\n      id: shortId.generate(),\r\n      User: {\r\n        id: shortId.generate(),\r\n        nickname: faker.name.findName(),\r\n      },\r\n      content: faker.lorem.paragraph(),\r\n      Images: [\r\n        {\r\n          src: faker.image.imageUrl(),\r\n        },\r\n      ],\r\n      Comments: [\r\n        {\r\n          User: {\r\n            id: shortId.generate(),\r\n            nickname: faker.name.findName(),\r\n          },\r\n          content: faker.lorem.sentence(),\r\n        },\r\n      ],\r\n    }));\r\ninitialState.mainPosts = initialState.mainPosts.concat();\r\n\r\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\r\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\r\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\r\n\r\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\r\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\r\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\r\n\r\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\r\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\r\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nconst dummyPost = (data) => ({\r\n  id: data.id,\r\n  content: data.content,\r\n  User: {\r\n    id: 1,\r\n    nickname: \"박종익\",\r\n  },\r\n  Images: [],\r\n  Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n  id: shortId.generate(),\r\n  content: data,\r\n  User: {\r\n    id: 1,\r\n    nickname: \"박종익\",\r\n  },\r\n});\r\n\r\nconst reducer = (state = initialState, action) =>\r\n  produce(state, (draft) => {\r\n    switch (action.type) {\r\n      case ADD_POST_REQUEST:\r\n        draft.addPostLoading = true;\r\n        draft.addPostDone = false;\r\n        draft.addPostError = null;\r\n        break;\r\n      case ADD_POST_SUCCESS:\r\n        draft.addPostLoading = false;\r\n        draft.addPostDone = true;\r\n        draft.mainPosts.unshift(dummyPost(action.data));\r\n        break;\r\n      case ADD_POST_FAILURE:\r\n        draft.addPostLoading = true;\r\n        draft.addPostError = action.error;\r\n        break;\r\n      case REMOVE_POST_REQUEST:\r\n        draft.removePostLoading = true;\r\n        draft.removePostDone = false;\r\n        draft.removePostError = null;\r\n        break;\r\n      case REMOVE_POST_SUCCESS:\r\n        draft.removePostLoading = false;\r\n        draft.removePostDone = true;\r\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n      case REMOVE_POST_FAILURE:\r\n        draft.removePostLoading = false;\r\n        draft.removePostError = action.error;\r\n        break;\r\n\r\n      case ADD_COMMENT_REQUEST:\r\n        draft.addCommentLoading = true;\r\n        draft.addCommentDone = false;\r\n        draft.addCommentError - null;\r\n        break;\r\n      case ADD_COMMENT_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n        post.Comments.unshift(dummyComment(action.data.content));\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentDone = true;\r\n\r\n        break;\r\n        // const postIndex = state.mainPosts.findIndex(\r\n        //   (v) => v.id === action.data.postId\r\n        // );\r\n        // const post = { ...state.mainPosts[postIndex] };\r\n        // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n        // const mainPosts = [...state.mainPosts];\r\n        // mainPosts[postIndex] = post;\r\n        // return {\r\n        //   ...state,\r\n        //   mainPosts,\r\n        //   addCommentLoading: false,\r\n        //   addCommentDone: true,\r\n        // };\r\n      }\r\n      case ADD_COMMENT_FAILURE:\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentError = action.error;\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n\r\nexport default reducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}