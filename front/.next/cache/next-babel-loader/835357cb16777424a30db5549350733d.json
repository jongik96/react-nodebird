{"ast":null,"code":"import axios from \"axios\";\nimport { all, call, delay, fork, put, takeLatest, throttle } from \"redux-saga/effects\";\nimport shortId, { generate } from \"shortid\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, generateDummyPost, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\"; // function loadPostAPI(data) {\n//   return axios.get(\"/api/posts\", data);\n// }\n\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10) // data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n} // function addPostAPI(data) {\n//   return axios.post(\"/api/post\", data);\n// }\n\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      } // data: result.data,\n\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n} // function removePostAPI(data) {\n//   return axios.delete(\"/api/post\", data);\n// }\n\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data // data: result.data,\n\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n} // function addCommentAPI(data) {\n//   return axios.post(`/api/post/${data.id}/comment`, data);\n// }\n\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchAddComment), fork(watchRemovePost)]);\n}","map":{"version":3,"names":["axios","all","call","delay","fork","put","takeLatest","throttle","shortId","generate","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","generateDummyPost","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPosts","action","id","type","data","err","response","addPost","content","removePost","addComment","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"sources":["C:/react-study/next-inflearn/front/sagas/post.js"],"sourcesContent":["import axios from \"axios\";\r\nimport {\r\n  all,\r\n  call,\r\n  delay,\r\n  fork,\r\n  put,\r\n  takeLatest,\r\n  throttle,\r\n} from \"redux-saga/effects\";\r\nimport shortId, { generate } from \"shortid\";\r\nimport {\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  generateDummyPost,\r\n  LOAD_POSTS_FAILURE,\r\n  LOAD_POSTS_REQUEST,\r\n  LOAD_POSTS_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS,\r\n} from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\r\n\r\n// function loadPostAPI(data) {\r\n//   return axios.get(\"/api/posts\", data);\r\n// }\r\n\r\nfunction* loadPosts(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI, action.data);\r\n    yield delay(1000);\r\n    const id = shortId.generate();\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: generateDummyPost(10),\r\n      // data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n// function addPostAPI(data) {\r\n//   return axios.post(\"/api/post\", data);\r\n// }\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI, action.data);\r\n    yield delay(1000);\r\n    const id = shortId.generate();\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: {\r\n        id,\r\n        content: action.data,\r\n      },\r\n      // data: result.data,\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n// function removePostAPI(data) {\r\n//   return axios.delete(\"/api/post\", data);\r\n// }\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: action.data,\r\n      // data: result.data,\r\n    });\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n// function addCommentAPI(data) {\r\n//   return axios.post(`/api/post/${data.id}/comment`, data);\r\n// }\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    // const result = yield call(addCommentAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchAddPost),\r\n    fork(watchLoadPosts),\r\n    fork(watchAddComment),\r\n    fork(watchRemovePost),\r\n  ]);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}